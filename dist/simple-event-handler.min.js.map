{"version":3,"sources":["../src/simple-event-handler.js"],"names":["EventHandler","subscribe","events","fn","$scope","validateCallback","validateName","_subscribe","Array","length","throwNameError","forEach","eventName","this","name","subscriptions","push","$on","unsubscribe","once","handler","fire","args","undefined","splice","indexOf","unsubscribeAll","Function","Error","on","emit","off","offAll","window","angular","module","service","exports"],"mappings":"AAAA,cACA,WACA,QAAAA,KAiBA,QAAAC,GAAAC,EAAAC,EAAAC,GAuBA,MAtBAC,GAAAF,GAEAD,EACA,gBAAAA,IACAI,EAAAJ,GACAK,EAAAL,EAAAC,EAAAC,IACAF,YAAAM,QACAN,EAAAO,QACAC,IAGAR,EAAAS,QAAAL,GACAJ,EAAAS,QAAA,SAAAC,GACAL,EAAAK,EAAAT,EAAAC,MAGAM,IAGAA,IAGAG,KAGA,QAAAN,GAAAO,EAAAX,EAAAC,GACAW,EAAAD,KACAC,EAAAD,OAGAC,EAAAD,GAAAE,KAAAb,GAEAC,GAAAA,EAAAa,KAAAb,EAAAa,IAAA,WAAA,WACAC,EAAAJ,EAAAX,KAIA,QAAAgB,GAAAjB,EAAAC,EAAAC,GAGA,GAFAC,EAAAF,GAEAD,EACA,GAAA,gBAAAA,GAAA,CACAI,EAAAJ,EAEA,IAAAkB,GAAA,WACAF,EAAAhB,EAAAkB,GACAjB,IAEAI,GAAAL,EAAAkB,EAAAhB,OACAF,aAAAM,QACAN,EAAAO,QACAC,IAGAR,EAAAS,QAAAL,GACAJ,EAAAS,QAAA,SAAAC,GACA,GAAAQ,GAAA,WACAF,EAAAN,EAAAQ,GACAjB,IAGAI,GAAAK,EAAAQ,EAAAhB,MAGAM,QAGAA,IAGA,OAAAG,MAGA,QAAAQ,GAAAP,EAAAQ,GACA,MAAAP,GAAAD,IAEAC,EAAAD,GAAAH,QAAA,SAAAR,GACAA,EAAAoB,QAAAD,EAAAA,QAGAT,MANA,OASA,QAAAK,GAAAJ,EAAAX,GAGA,MAFAG,GAAAQ,GACAT,EAAAF,GACAY,EAAAD,IACAC,EAAAD,GAAAU,OAAAT,EAAAD,GAAAW,QAAAtB,GAAA,GACAU,MAFA,OAKA,QAAAa,GAAAZ,GAEA,MADAR,GAAAQ,GACAC,EAAAD,IACAC,EAAAD,MACAD,MAFA,OAKA,QAAAP,GAAAQ,GACAA,GAAA,gBAAAA,IACAJ,IAIA,QAAAL,GAAAF,GACA,KAAAA,GAAAA,YAAAwB,WACA,KAAA,IAAAC,OAAA,iCAIA,QAAAlB,KACA,KAAA,IAAAkB,OAAA,0BAhIA,GAAAb,KAEAF,MAAAZ,UAAAA,EACAY,KAAAgB,GAAA5B,EAEAY,KAAAM,KAAAA,EAEAN,KAAAQ,KAAAA,EACAR,KAAAiB,KAAAT,EAEAR,KAAAK,YAAAA,EACAL,KAAAkB,IAAAb,EAEAL,KAAAa,eAAAA,EACAb,KAAAmB,OAAAN,EAsHA,mBAAAO,UACAA,OAAAjC,aAAAA,EAEAiC,OAAAC,SACAA,QAAAC,OAAA,2BAAAC,QAAA,gBAAApC,IAIA,mBAAAmC,UACAA,OAAAE,QAAA,GAAArC","file":"simple-event-handler.min.js","sourcesContent":["'use strict';\n(function() {\n    function EventHandler() {\n        var subscriptions = {};\n\n        this.subscribe = subscribe;\n        this.on = subscribe;\n\n        this.once = once;\n\n        this.fire = fire;\n        this.emit = fire;\n\n        this.unsubscribe = unsubscribe;\n        this.off = unsubscribe;\n\n        this.unsubscribeAll = unsubscribeAll;\n        this.offAll = unsubscribeAll;\n\n        function subscribe(events, fn, $scope) {\n            validateCallback(fn);\n\n            if(events) {\n                if(typeof events == 'string') {\n                    validateName(events);\n                    _subscribe(events, fn, $scope);\n                } else if(events instanceof Array) {\n                    if(!events.length) {\n                        throwNameError();\n                    }\n\n                    events.forEach(validateName);\n                    events.forEach(function (eventName) {\n                        _subscribe(eventName, fn, $scope);\n                    });\n                } else {\n                    throwNameError();\n                }\n            } else {\n                throwNameError();\n            }\n\n            return this;\n        }\n\n        function _subscribe(name, fn, $scope) {\n            if (!subscriptions[name]) {\n                subscriptions[name] = [];\n            }\n\n            subscriptions[name].push(fn);\n\n            $scope && $scope.$on && $scope.$on('$destroy', function () {\n                unsubscribe(name, fn);\n            });\n        }\n\n        function once(events, fn, $scope) {\n            validateCallback(fn);\n\n            if(events) {\n                if(typeof events == 'string') {\n                    validateName(events);\n\n                    var handler = function () {\n                        unsubscribe(events, handler);\n                        fn();\n                    };\n                    _subscribe(events, handler, $scope);\n                } else if(events instanceof Array) {\n                    if(!events.length) {\n                        throwNameError();\n                    }\n\n                    events.forEach(validateName);\n                    events.forEach(function (eventName) {\n                        var handler = function () {\n                            unsubscribe(eventName, handler);\n                            fn();\n                        };\n\n                        _subscribe(eventName, handler, $scope);\n                    });\n                } else {\n                    throwNameError();\n                }\n            } else {\n                throwNameError();\n            }\n\n            return this;\n        }\n\n        function fire(name, args) {\n            if (!subscriptions[name]) return;\n\n            subscriptions[name].forEach(function (fn) {\n                fn(args != undefined ? args : {}); // empty object can be used as a shared storage\n            });\n\n            return this;\n        }\n\n        function unsubscribe(name, fn) {\n            validateName(name);\n            validateCallback(fn);\n            if (!subscriptions[name]) return;\n            subscriptions[name].splice(subscriptions[name].indexOf(fn), 1);\n            return this;\n        }\n\n        function unsubscribeAll(name) {\n            validateName(name);\n            if (!subscriptions[name]) return;\n            subscriptions[name] = [];\n            return this;\n        }\n        \n        function validateName(name) {\n            if (!name || typeof name != 'string') {\n                throwNameError();\n            }\n        }\n\n        function validateCallback(fn) {\n            if (!fn || !(fn instanceof Function)) {\n                throw new Error('callback function is required');\n            }\n        }\n\n        function throwNameError() {\n            throw new Error('event name is required');\n        }\n    }\n\n    if(typeof window != \"undefined\") {\n        window.EventHandler = EventHandler;\n\n        if(window.angular) {\n            angular.module('simple-event-handler', []).service('$eventHandler', EventHandler);\n        }\n    }\n\n    if(typeof module != \"undefined\") {\n        module.exports = new EventHandler();\n    }\n})();"]}